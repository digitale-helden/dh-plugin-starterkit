#!/usr/bin/env bash
#================================================================
# HEADER
#================================================================
#% SYNOPSIS
#+      ${SCRIPT_NAME} args ...
#%
#% DESCRIPTION
#%      Digitale Helden Plugin starter kit
#%
#%      Script will install a plugin skeleton for ready out-of-the-box plugin development
#%
#% OPTIONS
#%
#%      -h, --help                  Print this help
#%      -v, --version               Print script information
#%
#% EXAMPLES
#%      ${SCRIPT_NAME}
#%
#================================================================
#- IMPLEMENTATION
#-      version         ${SCRIPT_NAME} 0.0.3
#-      author          Frank Mueller (setcooki)
#-      copyright       Copyright (c) http://set.cooki.me
#-      license         MIT License
#-
#================================================================
#  HISTORY
#       2018/10/01 : setcooki : script creation
#       2018/10/08 : setcooki : fixes namespace placeholder
#       2019/25/04 : setcooki : improving npm installing
#
#================================================================
# END_OF_HEADER
#================================================================


SCRIPT_HEADSIZE=$(head -200 ${0} |grep -n "^# END_OF_HEADER" | cut -f1 -d:)
SCRIPT_NAME="$(basename ${0})"

USAGE() { printf "Usage: "; head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#+" | sed -e "s/^#+[ ]*//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g" ; }
HELP() { head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#[%+-]" | sed -e "s/^#[%+-]//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g" ; }
INFO() { head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#-" | sed -e "s/^#-//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g"; }

if [[ ( $@ == "--help") ||  $@ == "-h" ]]
then
    HELP
	exit 0
fi;

if [[ ( $@ == "--version") ||  $@ == "-v" ]]
then
    INFO
	exit 0
fi;

trim() {
    local var="$*"
    var="${var#"${var%%[![:space:]]*}"}"
    var="${var%"${var##*[![:space:]]}"}"
    echo -n "$var"
}

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
REPO_PATH="https://raw.githubusercontent.com/digitale-helden/dh-plugin-starterkit/master/starterkit"
DIST_PATH="https://raw.githubusercontent.com/digitale-helden/dh-plugin-starterkit/master/dist"
PHP=$(which PHP)
PLUGIN_NAME=""
PLUGIN_FILE_NAME=""
PLUGIN_URI=""
PLUGIN_DESCRIPTION=""
PLUGIN_AUTHOR=""
PLUGIN_AUTHOR_URI=""
PLUGIN_TEXT_DOMAIN=""

#parse command line arguments
for i in "$@"
do
case $i in
    --php=*)
    PHP="${i#*=}"
    shift # past argument=value
    ;;
    --pluginName=*)
    PLUGIN_NAME="${i#*=}"
    shift # past argument=value
    ;;
    --pluginFileName=*)
    PLUGIN_FILE_NAME="${i#*=}"
    shift # past argument=value
    ;;
    --pluginUri=*)
    PLUGIN_URI="${i#*=}"
    shift # past argument=value
    ;;
    --pluginDescription=*)
    PLUGIN_DESCRIPTION="${i#*=}"
    shift # past argument=value
    ;;
    --pluginAuthor=*)
    PLUGIN_AUTHOR="${i#*=}"
    shift # past argument=value
    ;;
    --pluginAuthorUri=*)
    PLUGIN_AUTHOR_URI="${i#*=}"
    shift # past argument=value
    ;;
    --pluginTextDomain=*)
    PLUGIN_TEXT_DOMAIN="${i#*=}"
    shift # past argument=value
    ;;
    *)
    # unknown option
    ;;
esac
done

if [ ! -x "$(command -v unzip)" ];
then
    echo -n "Could not find 'unzip' executable. Aborting now ..."
    exit 1
fi;

if [ ! -x "$(command -v npm)" ];
then
    echo -n "Could not find 'npm' executable. Please install first: https://www.npmjs.com/get-npm"
    exit 1
fi;

if [ ! -x "$(command -v composer)" ];
then
    echo -n "Could not find 'composer' executable. Please install first: https://getcomposer.org/download/"
    exit 1
fi;

if [ -d "$DIR/~tmp" ]; then
    rm -rf "$DIR/~tmp/*"
else
    mkdir -p "$DIR/~tmp"
fi;

cd "$DIR/~tmp"

echo "... Getting dist files:"

wget "$DIST_PATH/dist.zip" 2>/dev/null || curl -O -k "$DIST_PATH/dist.zip"

echo "OK!"

echo "... Unzip dist files:"

echo "OK!"

unzip -o -q "$DIR/~tmp/dist.zip"
rm -f "$DIR/~tmp/dist.zip"

echo "... Running starterkit install:"

sleep .5

if [ -z "$PLUGIN_NAME" ];
then
    while true; do
        echo -n "Enter plugin (nice) name as it appears in wordpress plugin comment [ENTER]:"
        read PLUGIN_NAME
        PLUGIN_NAME=$(trim $PLUGIN_NAME)
        if [ ! -z "$PLUGIN_NAME" ]; then
            echo "> $PLUGIN_NAME"; break;
        fi;
        sleep .5
    done;
else
    echo "> Using plugin name: $PLUGIN_NAME"
fi;

sleep .5

if [ -z "$PLUGIN_FILE_NAME" ];
then
    while true; do
        echo -n "Enter plugin file name (dh-plugin-<your-name>) NOTE: this value will define PHP namespaces and variable names [ENTER]:"
        read PLUGIN_FILE_NAME
        PLUGIN_FILE_NAME=$(trim $PLUGIN_FILE_NAME)
        if [ ! -z "$PLUGIN_FILE_NAME" ]; then
            echo "> $PLUGIN_FILE_NAME"; break;
        fi;
        sleep .5
    done;
else
    echo "> Using plugin file name: $PLUGIN_FILE_NAME"
fi;

sleep .5

if [ -z "$PLUGIN_URI" ];
then
    while true; do
        echo -n "Enter plugin uri (url to repository of plugin) [ENTER]:"
        read PLUGIN_URI
        PLUGIN_URI=$(trim $PLUGIN_URI)
        if [ ! -z "$PLUGIN_URI" ]; then
            echo "> $PLUGIN_URI"; break;
        fi;
        sleep .5
    done;
else
    echo "> Using plugin uri: $PLUGIN_URI"
fi;

sleep .5

if [ -z "$PLUGIN_DESCRIPTION" ];
then
    while true; do
        echo -n "Enter plugin description text [ENTER]:"
        read PLUGIN_DESCRIPTION
        PLUGIN_DESCRIPTION=$(trim $PLUGIN_DESCRIPTION)
        if [ ! -z "$PLUGIN_DESCRIPTION" ]; then
            echo "> $PLUGIN_DESCRIPTION"; break;
        fi;
        sleep .5
    done;
else
    echo "> Using plugin description text: $PLUGIN_DESCRIPTION"
fi;

sleep .5

if [ -z "$PLUGIN_AUTHOR" ];
then
    while true; do
        echo -n "Enter plugin author name [ENTER]:"
        read PLUGIN_AUTHOR
        PLUGIN_AUTHOR=$(trim $PLUGIN_AUTHOR)
        if [ ! -z "$PLUGIN_AUTHOR" ]; then
            echo "> $PLUGIN_AUTHOR"; break;
        fi;
        sleep .5
    done;
else
    echo "> Using plugin author name: $PLUGIN_AUTHOR"
fi;

sleep .5

if [ -z "$PLUGIN_AUTHOR_URI" ];
then
    while true; do
        echo -n "Enter plugin author uri (email or hompage url) [ENTER]:"
        read PLUGIN_AUTHOR_URI
        PLUGIN_AUTHOR_URI=$(trim $PLUGIN_AUTHOR_URI)
        if [ ! -z "$PLUGIN_AUTHOR_URI" ]; then
            echo "> $PLUGIN_AUTHOR_URI"; break;
        fi;
        sleep .5
    done;
else
    echo "> Using plugin author uri: $PLUGIN_AUTHOR_URI"
fi;

sleep .5

if [ -z "$PLUGIN_TEXT_DOMAIN" ];
then
    while true; do
        echo -n "Enter plugin text domain [ENTER]:"
        read PLUGIN_TEXT_DOMAIN
        PLUGIN_TEXT_DOMAIN=$(trim $PLUGIN_TEXT_DOMAIN)
        if [ ! -z "$PLUGIN_TEXT_DOMAIN" ]; then
            echo "> $PLUGIN_TEXT_DOMAIN"; break;
        fi;
        sleep .5
    done;
else
    echo "> Using plugin text domain: $PLUGIN_TEXT_DOMAIN"
fi;

echo "... Running npm install:"

npm install gulp --save-dev

npm install --silent

echo "OK!"

echo "... Running gulp build:"

gulp default --pluginName="$PLUGIN_NAME" --pluginFileName="$PLUGIN_FILE_NAME" --pluginUri="$PLUGIN_URI" --pluginDescription="$PLUGIN_DESCRIPTION" --pluginAuthor="$PLUGIN_AUTHOR" --pluginAuthorUri="$PLUGIN_AUTHOR_URI" --pluginTextDomain="$PLUGIN_TEXT_DOMAIN"

echo "OK!"

if [ ! -d "$DIR/wordpress" ]; then

    echo "... Installing wordpress as resource:"
    cd "$DIR/bin"
    curl -O -k https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
    cd ..
    mkdir -p "$DIR/wordpress"
    $PHP ./bin/wp-cli.phar core download --path="$DIR/wordpress" --force
    echo "OK!"
fi;

cd "$DIR"

rm -rf "$DIR/~tmp"

echo "... Installing dependencies now"

composer install

npm install --silent

echo "OK!"

echo "All done!"
exit 0;